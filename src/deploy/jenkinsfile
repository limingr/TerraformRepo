pipeline {
    agent any
    
    parameters { text(name: 'BUILD_ENV', defaultValue: 'wsdeploy', description: '') }

    environment {
        AZURE_SUBSCRIPTION_ID='aae27198-c02d-49fc-a164-d45d35267dd2'
        AZURE_TENANT_ID='e22100bd-861d-4f4c-a190-7c4f45feeccf'
        AZURE_BACKEND_STORAGE_SECRET = credentials('terraform_state_azure_backend_storage_key')
    }

    stages {
        stage('expression') {
            when {
                // case insensitive regular expression for truthy values
                expression { "${params.BUILD_ENV}".startsWith('ws') }
            }
            steps {
                echo 'Building....'
                sh 'pwd'
            }
        }
        stage('Foo') {
        steps {
            script {
                def now = new Date()
                env.BUILD_ENV = env.BUILD_ENV+now.format("yyMMddHHmm", TimeZone.getTimeZone('UTC'))
                println now.format("yyMMddHHmm", TimeZone.getTimeZone('UTC'))
            }
        } 
        }
        stage('expression 2') {
            when {
                // case insensitive regular expression for truthy values
                expression { params.BUILD_ENV.startsWith('ws') }
            }
            steps {
                echo 'Building....'
                sh 'pwd'
            }
        }

        stage('expression 3') {
            when {
                // case insensitive regular expression for truthy values
                expression { env.AZURE_BACKEND_STORAGE_SECRET.startsWith('ws') }
            }
            steps {
                echo 'Building....'
                sh 'pwd'
            }
        }

        stage('Deploy') {
            steps {
                withCredentials([azureServicePrincipal('AzureServicePrincipal')]) {
                    dir('.'){
                        sh """#!/bin/bash
                        set -e

                        terraform --version

                        terraform init -no-color \
                            -backend-config='storage_account_name=tstate13126' \
                            -backend-config='container_name=tstate' \
                            -backend-config='key=terraform.mytfstate' \
                            -backend-config='access_key=${AZURE_BACKEND_STORAGE_SECRET}'


                        terraform workspace new ${BUILD_ENV} || true
                        terraform workspace select ${BUILD_ENV} 
                        terraform init
                        terraform init -no-color \
                            -backend-config='storage_account_name=tstate13126' \
                            -backend-config='container_name=tstate' \
                            -backend-config='key=terraform.mytfstate' \
                            -backend-config='access_key=${AZURE_BACKEND_STORAGE_SECRET}'

                        terraform plan -no-color -var client_secret='${AZURE_CLIENT_SECRET}' -var suggested_rg_name='${BUILD_ENV}' -out=deployCodePlan
                        terraform apply -no-color deployCodePlan
                        sh """
                    }
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    String build_env=String.valueOf(BUILD_ENV)
                    if (build_env.startsWith('ws')){ 
                        echo 'BUILD_ENV starts with ws....'
                    }
                    else {
                        echo 'BUILD_ENV does not start with ws....'
                    }

                    if ("${params.BUILD_ENV}".startsWith('ws')){ 
                        echo '2 BUILD_ENV starts with ws....'
                    }
                    else {
                        echo '2 BUILD_ENV does not start with ws....'
                    }
                }
            }
        }


        stage('Starting myDestroy job') {
          steps {
            echo 'Starting....'
            // build job: 'myDestroy', parameters: [string(name: 'BUILD_ENV', value: String.valueOf(BUILD_ENV))]

          }
        }
    }
}


